hostname: bigbang.dev

kibana:
  version: 7.9.2
  image:
    repository: registry1.dso.mil/ironbank/elastic/kibana/kibana
    tag: 7.9.2

  # Number of Kibana replicas
  count: 3

  securityContext: 
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

  imagePullSecrets: [ ]

  resources: {}
    # requests:
    #   memory: 1Gi
    #   cpu: 0.5
    # limits:
    #   memory: 2Gi
    #   cpu: 2

  volumes: []

  volumeMounts: []

  affinity: {}
    # podAntiAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     - topologyKey: "kubernetes.io/hostname"
    #       labelSelector:
    #         matchLabels:
    #           dont-schedule-with: kibana
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #     - matchExpressions:
    #       - key: node-type
    #         operator: In
    #         values:
    #         - "kibana"

  nodeSelector: {}
    # node-type: kibana
  lifecycle: {}
    # preStop:
    #   exec:
    #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
    # postStart:
    #   exec:
    #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]

elasticsearch:
  version: 7.9.2
  image:
    repository: registry1.dso.mil/ironbank/elastic/elasticsearch/elasticsearch
    tag: 7.9.2

  imagePullSecrets: [ ] 

  # Values for master node sets
  master:
    initContainers: []
    # add an init container that adjusts the kernel setting for elastic
    # - name: sysctl
    #   securityContext:
    #     privileged: true
    #   image: busybox
    #   command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']

    # Add ability customize the security context for 
    # fixing user or group.  
    securityContext: 
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000

    volumes: []
    # - name: cert
    #   secret:
    #     secretName: cert
    #     defaultMode: 0644
  
    volumeMounts: []
    # - mountPath: "/usr/share/elasticsearch/config/oidc/ca.crt"
    #   name: cert
    #   subPath: ca.crt
    #   readOnly: true

    affinity: {}
      # podAntiAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     - topologyKey: "kubernetes.io/hostname"
      #       labelSelector:
      #         matchLabels:
      #           dont-schedule-with: elastic-master
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #     - matchExpressions:
      #       - key: node-type
      #         operator: In
      #         values:
      #         - "elastic-master"

    nodeSelector: {}
      # node-type: elastic-master
    lifecycle: {}
      # preStop:
      #   exec:
      #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]

    count: 3
    persistence:
      storageClassName: ""
      size: 5Gi
    resources: {}
      # limits:
      #   cpu: 2
      #   memory: 4Gi
      # requests:
      #   cpu: 1
      #   memory: 2Gi
    heap:
      # Xms
      min: 1g
      # Xmx
      max: 1g

  # Values for data node sets
  data:
    initContainers: []
    # add an init container that adjusts the kernel setting for elastic
    # - name: sysctl
    #   securityContext:
    #     privileged: true
    #   image: busybox
    #   command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']

    # Add ability customize the security context for 
    # fixing user or group.  
    securityContext: 
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000

    volumes: []
      # - name: cert
      #   secret:
      #     secretName: cert
      #     defaultMode: 0644
  
    volumeMounts: []
      # - mountPath: "/usr/share/elasticsearch/config/oidc/ca.crt"
      #   name: cert
      #   subPath: ca.crt
      #   readOnly: true

    affinity: {}
      # podAntiAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     - topologyKey: "kubernetes.io/hostname"
      #       labelSelector:
      #         matchLabels:
      #           dont-schedule-with: elastic-data
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #     - matchExpressions:
      #       - key: node-type
      #         operator: In
      #         values:
      #         - "elastic-data"

    nodeSelector: {}
      # node-type: elastic-data
    lifecycle: {}
      # preStop:
      #   exec:
      #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]

    count: 4
    persistence:
      storageClassName: ""
      size: 100Gi
    resources: {}
#      limits:
#        cpu: 4
#        memory: 4Gi
#      requests:
#        cpu: 2
#        memory: 2Gi
    heap:
      # Xms
      min: 1g
      # Xmx
      max: 1g

istio:
  # Toggle istio interaction
  enabled: false
  kibana:
    # Toggle vs creation
    enabled: true
    annotations: {}
    labels: {}
    gateways:
      - istio-system/main
    hosts:
      - kibana.{{ .Values.hostname }}


# Toggle and configure SSO with Keycloak
# Example values are for local development
sso:
  enabled: false
  # redirect_url defaults to .Values.istio.kibana.hosts[0] if not set
  redirect_url: ""
  client_id: platform1_a8604cc9-f5e9-4656-802d-d05624370245_bb8-kibana

  # -- OIDC client secret, can be empty for public client
  client_secret: ""
  oidc:
    host: login.dso.mil
    realm: baby-yoda

# Toggle this to turn off Kibana's built in auth and only allow SSO
# Role mappings for SSO groups must be set up and SSO enabled before doing this
kibanaBasicAuth:
  enabled: true
